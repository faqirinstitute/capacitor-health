{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface HealthPlugin {\n  /**\n   * Checks if health API is available.\n   * Android: If false is returned, the Google Health Connect app is probably not installed.\n   * See showHealthConnectInPlayStore()\n   *\n   */\n  isHealthAvailable(): Promise<{ available: boolean }>;\n\n  /**\n   * Android only: Returns for each given permission, if it was granted by the underlying health API\n   * @param permissions permissions to query\n   */\n  checkHealthPermissions(permissions: PermissionsRequest): Promise<PermissionResponse>;\n\n  /**\n   * Requests the permissions from the user.\n   *\n   * Android: Apps can ask only a few times for permissions, after that the user has to grant them manually in\n   * the Health Connect app. See openHealthConnectSettings()\n   *\n   * iOS: If the permissions are already granted or denied, this method will just return without asking the user. In iOS\n   * we can't really detect if a user granted or denied a permission. The return value reflects the assumption that all\n   * permissions were granted.\n   *\n   * @param permissions permissions to request\n   */\n  requestHealthPermissions(permissions: PermissionsRequest): Promise<PermissionResponse>;\n\n  /**\n   * Opens the apps settings, which is kind of wrong, because health permissions are configured under:\n   * Settings > Apps > (Apple) Health > Access and Devices > [app-name]\n   * But we can't go there directly.\n   */\n  openAppleHealthSettings(): Promise<void>;\n\n  /**\n   * Opens the Google Health Connect app\n   */\n  openHealthConnectSettings(): Promise<void>;\n\n  /**\n   * Opens the Google Health Connect app in PlayStore\n   */\n  showHealthConnectInPlayStore(): Promise<void>;\n\n  /**\n   * Query aggregated data\n   * @param request\n   */\n  queryAggregated(request: QueryAggregatedRequest): Promise<QueryAggregatedResponse>;\n\n  /**\n   * Query workouts\n   * @param request\n   */\n  queryWorkouts(request: QueryWorkoutRequest): Promise<QueryWorkoutResponse>;\n\n  /**\n   * Query sleep\n   * @param request\n   */\n  querySleep(request: QuerySleepRequest): Promise<QuerySleepResponse>;\n\n  // /**\n  //  * Query activity intensity\n  //  * @param request\n  //  */\n  // queryActivityIntensity(request: QueryActivityIntensityRequest): Promise<QueryActivityIntensityResponse>;\n\n  /**\n   * Query basal body temperature\n   * @param request\n   */\n  queryBasalBodyTemperature(request: QueryBasalBodyTemperatureRequest): Promise<QueryBasalBodyTemperatureResponse>;\n\n  /**\n   * Query blood glucose\n   * @param request\n   */\n  queryBloodGlucose(request: QueryBloodGlucoseRequest): Promise<QueryBloodGlucoseResponse>;\n  /**\n   * Query oxygen saturation\n   * @param request\n   */\n  queryOxygenSaturation(request: QueryOxygenSaturationRequest): Promise<QueryOxygenSaturationResponse>;\n  /**\n   * Query heart rate \n   * @param request\n   */\n  queryHeartRate(request: QueryHeartRateRequest): Promise<QueryHeartRateResponse>;\n\n}\n\n  \n// --- Permissions ---\nexport declare type HealthPermission =\n  | 'READ_STEPS'\n  | 'READ_WORKOUTS'\n  | 'READ_HEART_RATE'\n  | 'READ_ROUTE'\n  | 'READ_ACTIVE_CALORIES'\n  | 'READ_TOTAL_CALORIES'\n  | 'READ_DISTANCE'\n  | 'READ_ACTIVITY_INTENSITY'\n  | 'READ_BLOOD_GLUCOSE'\n  | 'READ_BLOOD_PRESSURE'\n  | 'READ_BODY_FAT'\n  | 'READ_BODY_TEMPERATURE'\n  | 'READ_BODY_WATER_MASS'\n  | 'READ_BODY_BONE_MASS'\n  | 'READ_BASAL_BODY_TEMPERATURE'\n  | 'READ_BASAL_METABOLIC_RATE'\n  | 'READ_CERVICAL_MUCUS'\n  | 'READ_ELEVATION_GAINED'\n  | 'READ_FLOORS_CLIMBED'\n  | 'READ_HEART_RATE_VARIABILITY'\n  | 'READ_HEIGHT'\n  | 'READ_HYDRATION'\n  | 'READ_INTERMENSTRUAL_BLEEDING'\n  | 'READ_LEAN_BODY_MASS'\n  | 'READ_MENSTRUATION'\n  | 'READ_MINDFULNESS'\n  | 'READ_NUTRITION'\n  | 'READ_OVULATION_TEST'\n  | 'READ_OXYGEN_SATURATION'\n  | 'READ_PLANNED_EXERCISE'\n  | 'READ_POWER'\n  | 'READ_RESPIRATORY_RATE'\n  | 'READ_RESTING_HEART_RATE'\n  | 'READ_SLEEP'\n  | 'READ_SPEED'\n  | 'READ_STEPS_CADENCE'\n  | 'READ_TOTAL_CALORIES_BURNED'\n  | 'READ_VO2_MAX'\n  | 'READ_WEIGHT'\n  | 'READ_WHEELCHAIR_PUSHES';\n\n\nexport interface PermissionsRequest {\n  permissions: HealthPermission[];\n}\n\nexport interface PermissionResponse {\n  permissions: { [key: string]: boolean }[];\n}\n\n// --- Data Types ---\n// every data type has a query request, a query response and a sample type (or session type) and sometimes with sub types\n// the doculmentation of the availabe data types can be found here: https://developer.android.com/health-and-fitness/guides/health-connect/plan/data-types#alpha10\n// also dont forget to check the HealthPermission list and add the query method to HealthPlugin\n\n// Workouts\nexport interface QueryWorkoutRequest {\n    startDate: string;\n    endDate: string;\n    includeHeartRate: boolean;\n    includeRoute: boolean;\n    includeSteps: boolean;\n}\nexport interface QueryWorkoutResponse {\n    workouts: Workout[];\n}\nexport interface Workout {\n    startDate: string;\n    endDate: string;\n    workoutType: string;\n    sourceName: string;\n    id?: string;\n    duration: number;\n    distance?: number;\n    steps?: number;\n    calories: number;\n    sourceBundleId: string;\n    route?: RouteSample[];\n    heartRate?: HeartRateSample[];\n}\n\nexport interface RouteSample {\n    timestamp: string;\n    lat: number;\n    lng: number;\n    alt?: number;\n}\n\n// Sleep\nexport interface QuerySleepRequest {\n    startDate: string;\n    endDate: string;\n}\nexport interface QuerySleepResponse {\n    sleepSessions: SleepSample[];\n}\nexport interface SleepSample {\n    startDate: string;\n    endDate: string;\n    id?: string;\n    stages: SleepStageSample[];\n}\nexport interface SleepStageSample {\n    startDate: string;\n    endDate: string;\n    stage: string;\n}\n\n// Basal Body Temperature\nexport interface QueryBasalBodyTemperatureRequest {\n    startDate: string;\n    endDate: string;\n}\nexport interface QueryBasalBodyTemperatureResponse {\n    basalBodyTemperatureSessions: BasalBodyTemperatureSample[];\n}\nexport interface BasalBodyTemperatureSample {\n    sampleDate: string;\n    id?: string;\n    temperatureCelsius: number;\n}\n\n// Blood Glucose\nexport interface QueryBloodGlucoseRequest {\n    startDate: string;\n    endDate: string;\n}\nexport interface QueryBloodGlucoseResponse {\n    bloodGlucoseSessions: BloodGlucoseSample[];\n}\nexport interface BloodGlucoseSample {\n    sampleDate: string;\n    id?: string;\n    level: number;\n    specimenSource: string;\n    mealType: string;\n    relationToMeal: string;\n}\n\n// Oxygen Saturation\nexport interface QueryOxygenSaturationRequest {\n    startDate: string;\n    endDate: string;\n}\nexport interface QueryOxygenSaturationResponse {\n    oxygenSaturationSessions: OxygenSaturationSample[];\n}\nexport interface OxygenSaturationSample {\n    sampleDate: string;\n    id?: string;\n    percentage: number;\n}\n\n// Heart rate\nexport interface QueryHeartRateRequest {\n    startDate: string;\n    endDate: string;\n}\nexport interface QueryHeartRateResponse {\n    heartRateMeasurements: HeartRateMeasurement[];\n}\nexport interface HeartRateMeasurement {\n    startDate: string;\n    endDate: string;\n    id?: string;\n    HeartRateSamples: HeartRateSample[];\n}\n\nexport interface HeartRateSample {\n    timestamp: string;\n    bpm: number;\n}\n\n// Aggregated Data\nexport interface QueryAggregatedRequest {\n    startDate: string;\n    endDate: string;\n    dataType: 'steps' | 'basal-calories' | 'active-calories' | 'total-calories' | 'distance' | 'mindfulness';\n    bucket: string;\n}\nexport interface QueryAggregatedResponse {\n    aggregatedData: AggregatedSample[];\n}\nexport interface AggregatedSample {\n    startDate: string;\n    endDate: string;\n    value: number;\n}\n\n"]}